<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Josh's Tech Blog]]></title><description><![CDATA[Experimenting with different techs]]></description><link>http://localhost:2368/</link><generator>Ghost 0.11</generator><lastBuildDate>Fri, 09 Dec 2016 11:03:32 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Serverless - Making lambda deployments easy]]></title><description><![CDATA[<p>In my last post I worked on my first lambda function and went through the process of manually setting up the function, gateway and roles. While this works it does slow down development considerably and I can see it quickly becoming a pain in the arse especially when dealing with</p>]]></description><link>http://localhost:2368/severless-making-lambda-deployments-easy/</link><guid isPermaLink="false">2aae2cfb-2649-4438-b56b-e24081c8c92c</guid><category><![CDATA[AWS Lambda]]></category><category><![CDATA[Serverless]]></category><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Sat, 26 Nov 2016 15:22:10 GMT</pubDate><content:encoded><![CDATA[<p>In my last post I worked on my first lambda function and went through the process of manually setting up the function, gateway and roles. While this works it does slow down development considerably and I can see it quickly becoming a pain in the arse especially when dealing with different environment's when releasing changes.</p>

<p>In comes <a href="https://serverless.com/">Serverless</a> which is a framework to help you develop and deploy serverless architectures in AWS. It's built on Node.js and currently only supports python and node runtime environment's however the others are in the works.</p>

<p>It sounds fairly decent so thought I'd try it out by switching the lorem-lipsum function I created in my last <a href="https://headly48.github.io/aws-creating-my-first-lambda-function/">post</a> to use it.</p>

<p>First up I installed the framework using npm following the instructions <a href="https://www.npmjs.com/package/serverless">here</a></p>

<p>Once installed I created the serverless.yml file with the following settings</p>

<pre><code>service: lorem-lipsum-serverless

frameworkVersion: "=1.2.1"

provider:  
  name: aws
  runtime: nodejs4.3
  memorySize: 128 

functions:  
  getLoremIpsum:
    handler: handler.getLoremIpsum
    events:
       - http:
           path: lorem
           method: get
</code></pre>

<p>With this file i'm creating the http endpoint '/lorem' which is mapped to the function getLoremIpsum which is below </p>

<p><img src="http://localhost:2368/content/images/2016/11/firstCode.JPG" alt=""></p>

<p>I'v now got the mappings and function but before I can deploy I need to create an AWS user that has all the permissions required to create and delete the stacks.</p>

<p>I added the json that I used to create the 6 policy's that I have added to my user <a href="https://github.com/headly48/blog-samples/tree/master/lorem-lipsum-serverless/policys">here</a> once done I set my awscli to use the user I just created.</p>

<p>I'v now got my mappings, the function and all the permissions I need so now time to deploy it!</p>

<p>This is as easy as running the command <code>serverless deploy</code> <br>
<img src="http://localhost:2368/content/images/2016/11/Deploying.JPG" alt=""></p>

<p>And the result</p>

<p><img src="http://localhost:2368/content/images/2016/11/firstResponse.JPG" alt=""></p>

<p>Hmm but now I wanted to make a change to the function to return a different response. After making the code changes and re-running the command it has been updated</p>

<p><img src="http://localhost:2368/content/images/2016/11/secondResponse.JPG" alt=""></p>

<p>By default when running <code>serverless deploy</code> it stages it as dev so now that the response is all good I wish to deploy it to prod</p>

<p><code>serverless deploy --stage prod</code></p>

<p><img src="http://localhost:2368/content/images/2016/11/prod.JPG" alt=""></p>

<p>I now have two different environments so that I can make code changes to dev and test them without effecting prod.</p>

<p>After running <code>serverless deploy</code> again my dev env reflects the changes</p>

<p><img src="http://localhost:2368/content/images/2016/11/devTextNew.JPG" alt=""></p>

<p>While the prod env is still returning the same response as what I deployed earlier.</p>

<p>Once finished It's just as easy to tear down and delete all traces of the stack by running the command <br>
<code>serverless remove</code></p>

<p><img src="http://localhost:2368/content/images/2016/11/removal.JPG" alt=""></p>

<p>While this was a fairly simple and small test the serverless framework does appear to do the job in helping to deploy the stacks with different stages and i'll be using it in the future :D.</p>

<p>The sample code can be found <a href="https://github.com/headly48/blog-samples/tree/master/lorem-lipsum-serverless">here</a></p>]]></content:encoded></item><item><title><![CDATA[AWS - Creating my first lambda function]]></title><description><![CDATA[<p>Since creating my AWS account a few days ago i have been dying to try out there lambda functions and thought I should create a very simple rest endpoint that will return a lorem lipsum message.</p>

<h3 id="creatingthefunction">Creating the function</h3>

<p>To get started I created a very basic index.js file</p>]]></description><link>http://localhost:2368/aws-creating-my-first-lambda-function/</link><guid isPermaLink="false">555f5d57-c4c2-4a95-9c2a-acd7e33c6aa5</guid><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Sat, 26 Nov 2016 08:03:53 GMT</pubDate><content:encoded><![CDATA[<p>Since creating my AWS account a few days ago i have been dying to try out there lambda functions and thought I should create a very simple rest endpoint that will return a lorem lipsum message.</p>

<h3 id="creatingthefunction">Creating the function</h3>

<p>To get started I created a very basic index.js file in a new project with a function handler that will be called by aws.</p>

<p><img src="http://localhost:2368/content/images/2016/11/index.JPG" alt=""></p>

<p>To keep it simple I used the lorem-ipsum node module available <a href="https://www.npmjs.com/package/lorem-ipsum">here</a> which i pulled down using a package.json file and npm </p>

<p><img src="http://localhost:2368/content/images/2016/11/package.JPG" alt=""></p>

<p>I then created a zip folder containing the index.js file and also its dependencies in the node_modules subfolder.</p>

<p>I did run into an issue when zipping these folders where it created a folder wrapping these files in the artifact and as such when uploading and testing in AWS I received errors saying the handler does not exist.</p>

<h3 id="mappingthelambdafunction">Mapping the lambda function</h3>

<p>Now that I had created the artifact it was time to login to the AWS console and go to the lambda <a href="https://console.aws.amazon.com/lambda/home?#/create/configure-function">dashboard</a> to create the lambda and map it to the function that I just created.</p>

<p>Below is the configurations I  used when configuring the new lambda <br>
<img src="http://localhost:2368/content/images/2016/11/CreateLambda.JPG" alt=""></p>

<p>Once done you should be able to test it out and if all works out well see the response :D</p>

<p><img src="http://localhost:2368/content/images/2016/11/Success.JPG" alt=""></p>

<h3 id="creatingthegateway">Creating the gateway</h3>

<p>Now that I had a function running I wanted to be able to trigger it and get the response using a rest call. This was setup by using the AWS <a href="https://console.aws.amazon.com/apigateway/home">gateway</a>.</p>

<p>First up I created an api and then created a get method to the lambda created above <br>
<img src="http://localhost:2368/content/images/2016/11/gateway.JPG" alt=""></p>

<p>Once the method is created I tested it out within the gateway and all looks good <br>
<img src="http://localhost:2368/content/images/2016/11/gatewaySuccess.JPG" alt=""></p>

<p>The final step is to deploy the gateway API. At first I missed this step and was stuck wondering why I was receiving error's when trying to hit the same endpoint that was displayed when testing.</p>

<p><img src="http://localhost:2368/content/images/2016/11/deployGateway.JPG" alt=""></p>

<p>Once done I was able to successfully hit the endpoint using postman and see the generated Lipsum text.</p>

<p>While I used the AWS console to manually configure the different components since it was my first time. Next time I would use their aws-cli and cloudformation to try and do it all automatically enabling quicker changes and updates to the function.</p>

<p>The code can be found <a href="https://github.com/headly48/blog-samples/tree/master/lorem-lipsum-lambda">here</a></p>]]></content:encoded></item><item><title><![CDATA[AWS - Setting up a free account]]></title><description><![CDATA[<p>For the last few years Amazon has offered a pretty substantial free tier for their cloud services and I thought what better time to sign up for a personal account.</p>

<p>The list of services that Amazon offer is quite mind-boggling however the products and associated limits that come with the</p>]]></description><link>http://localhost:2368/aws-setting-up-a-free-account/</link><guid isPermaLink="false">f1706623-fed9-44e4-b2b9-d3b251bb52a4</guid><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Wed, 23 Nov 2016 10:46:07 GMT</pubDate><content:encoded><![CDATA[<p>For the last few years Amazon has offered a pretty substantial free tier for their cloud services and I thought what better time to sign up for a personal account.</p>

<p>The list of services that Amazon offer is quite mind-boggling however the products and associated limits that come with the free tier can be found <a href="https://aws.amazon.com/free/">here</a></p>

<p>Below are the things that I am looking forward to trying out and the associated limits</p>

<ul>
<li><p><b>AWS Lambda</b> (1,000,000 executions per month)</p>

<p>This is Amazon's serverless platform allowing you to easily run code without requiring a dedicated instance or server and links in nicely with some of their other offerings such as DynamoDB and S3. The code that is executed can be either Java, node.js and Python</p></li>
<li><p><b>DynamoDB</b> (25 GB storage - 25Units read/write)</p>

<p>Amazon's NoSQL database </p></li>
<li><p><b>S3</b> (5GB storage - 20,000 Gets/ 2,000 Puts)</p>

<p>Amazon's service for object storage which is hopefully easy to use and secure. It offers 3 different types of storage depending on how often you would like to access the data</p></li>
<li><p><b>EC2</b> (1 x t2.micro instance)</p>

<p>Amazon's virtual server hosting allows for the quick and easy setup of server instances </p></li>
</ul>

<h4 id="signingup">Signing up</h4>

<p>Signing up was fairly straight forward and easy and can be started from <a href="https://www.amazon.com/ap/signin">here</a>. It looks like you can use your existing Amazon account if you already have one. <br>
During the verification part of the flow they use an automated phone call to provide you a code which is slightly different and I haven't really seen before.</p>

<h6 id="settingupmultifactorauthenticationmfa">Setting up multi-factor authentication (MFA)</h6>

<p>Once logged in I wanted to secure my account and ensure that it's less likely someone will get access and be able to spin up hundreds of EC2 instances costing me a fortune.</p>

<p>Fortunately they offer MFA and setup is done easily by going to the Identity and Access Management dashboard and selecting manage MFA</p>

<p>Since I am using an Android phone I elected the virtual MFA device option. <br>
Download the authenticate app which can be found on the google play store <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">here</a> </p>

<p>Once downloaded simply scan the barcode and enter in 2 of the codes as they appear. Now next time you log in you'll be prompted to enter the code that appears in the app which changes every 30 seconds</p>

<h6 id="settingupabillingalarm">Setting up a billing alarm</h6>

<p>Since this AWS account is mainly for being used as a playpen and I am fairly cheap I elected to create a billing alert. This is so that I am notified when I exceed the free tier limits so I can scale back my usage.</p>

<p>The docs on how to set this up can be found <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/free-tier-alarms.html">here</a></p>]]></content:encoded></item><item><title><![CDATA[Creating a free blog using github and ghost. Part II]]></title><description><![CDATA[<p>In the last post I went through the steps on how to set up a blog using github pages. Which can be found <a href="https://headly48.github.io/creating-a-free-blog-using-github-and-ghost/">here</a></p>

<p>In this post I'm going to continue with setting up my blog by adding a few more features.</p>

<h6 id="addingcomments">Adding Comments</h6>

<p>Whats a blog without comments?</p>

<p>In</p>]]></description><link>http://localhost:2368/creating-a-free-blog-using-github-and-ghost-part-ii/</link><guid isPermaLink="false">4c203802-268b-43e5-876d-2fae0bcf2a47</guid><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Thu, 04 Aug 2016 12:07:49 GMT</pubDate><content:encoded><![CDATA[<p>In the last post I went through the steps on how to set up a blog using github pages. Which can be found <a href="https://headly48.github.io/creating-a-free-blog-using-github-and-ghost/">here</a></p>

<p>In this post I'm going to continue with setting up my blog by adding a few more features.</p>

<h6 id="addingcomments">Adding Comments</h6>

<p>Whats a blog without comments?</p>

<p>In order to add comments I used <a href="https://disqus.com/">Disqus</a> due to it being very easy to integrate and is more or less plug and play.</p>

<p>The first step is to head over and register an account <a href="https://disqus.com/">here</a>. Once done go ahead and click the "I want to install disqus on my site" option. This will take you to a simple form where you specify your github site url.</p>

<p>Make sure you take a note of your unique disqus url which is present underneath the website name input box. You will require this later.</p>

<p>Once created head to the directory you pointed your docker file location. In my case i previously set it up to be  in the directory "Users/headly48/Documents/blog/ghost".</p>

<p>Now go into "themese/casper" and open post.hbs file in your favorite editor.</p>

<p>Find where the code below appears  </p>

<pre><code class="language-       "> &lt;section class="post-content"&gt;
   {{content}}
 &lt;/section&gt;
</code></pre>

<p>And past in </p>

<pre><code>        &lt;div id="disqus_thread"&gt;&lt;/div&gt;
        &lt;script type="text/javascript"&gt;
            var disqus_shortname = 'https-headly-github-io'; // required: replace example with your forum shortname
            var disqus_identifier = '{{post.id}}';

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        &lt;/script&gt;
        &lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
        &lt;a href="http://disqus.com" class="dsq-brlink"&gt;comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;
</code></pre>

<p>Now replace the disqus_shortname variable in the third line to be the same as the unique url you got when registering and save the file.</p>

<p>Have a look at your first post and make sure the comments section is loading properly </p>

<p>then go ahead and run the same buster-build-static script and buster deploy script as run previously</p>

<h6 id="addingyourblogtogoogle">Adding your blog to google</h6>

<p>In order to let people search and have your blog appear on google in the search results you need a sitemap xml which allows the search engines crawlers to easily find the content.</p>

<p>Unfortunately buster out of the box does not generate the sitemaps so we need to add it to our script</p>

<p>At the top under the buster generate command add the following snippet</p>

<pre><code> # Copy sitemap files
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://127.0.0.1:9050/sitemap.xsl  
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://127.0.0.1:9050/sitemap.xml  
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://localhost:9050/sitemap-pages.xml  
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://localhost:9050/sitemap-posts.xml  
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://localhost:9050/sitemap-authors.xml  
wget --convert-links --page-requisites --no-parent --directory-prefix static --no-host-directories --restrict-file-name=unix http://localhost:9050/sitemap-tags.xml  
</code></pre>

<p>Now save and run the script.</p>

<p>Next we need to tell google that our site is ours so that we can access stats and point it to our sitemaps.</p>

<p>Head to googles <a href="https://www.google.com/webmasters/tools/home">web master tools</a> and click the add property button and insert your github page url.</p>

<p>Next you should be prompted to verify ownership. They recommend to add in a html file to your site however if you go to the alternative tab you will find a meta tag which looks something like.</p>

<p><code>&lt;meta name="google-site-verification" content="mV9dWaG3eoW-q9NUnP6Radwdw6R1_db0" /&gt;</code></p>

<p>Copy this.</p>

<p>Go to your static directory generated by buster and edit your index.html file and paste this tag to somewhere in head tags.</p>

<p>Now run your scripts and deploy your changes to github.</p>

<p>Go back to your google verify page and click verify and you should now be registered.</p>

<p>To let google know about your sitemaps created before go to crawl on the left navigation bar and then sitemaps.</p>

<p>Click add sitemap and enter in "/sitemap.xml" into the box. </p>

<p>Now just wait for google to index your site. The google webmaster tools also allows you to check out the stats on your links to see how many people are coming to the site and how often you appear in the search rankings as well as what the users are searching for.</p>

<p>Try out my new comment section below and hopefully it should work..</p>]]></content:encoded></item><item><title><![CDATA[Creating a free blog using github and ghost]]></title><description><![CDATA[<p>As this is the first blog post it seems fitting to talk about how to set up a free blog using github.</p>

<h2 id="localsetup">Local Setup</h2>

<p>In order to get started quickly I decided to run my local ghost server using docker.</p>

<p>This can be downloaded and installed easily from <a href="https://www.docker.com/products/docker">https://www.</a></p>]]></description><link>http://localhost:2368/creating-a-free-blog-using-github-and-ghost/</link><guid isPermaLink="false">bc6be5c7-942a-49fb-9445-b33fba720698</guid><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Mon, 01 Aug 2016 11:22:26 GMT</pubDate><content:encoded><![CDATA[<p>As this is the first blog post it seems fitting to talk about how to set up a free blog using github.</p>

<h2 id="localsetup">Local Setup</h2>

<p>In order to get started quickly I decided to run my local ghost server using docker.</p>

<p>This can be downloaded and installed easily from <a href="https://www.docker.com/products/docker">https://www.docker.com/products/docker</a>. Just follow the instructions for your operating system.</p>

<p>Once installed open up a command line/terminal and run <br>
<code>docker pull ghost</code> <br>
This will pull down the required dependencies to start your blog server</p>

<p>The next step is to create and run a ghost container by using the following command. </p>

<p><code>docker run --name blog-ghost -p 9050:2368 -v /Users/headly48/Documents/blog/ghost:/var/lib/ghost ghost</code></p>

<ul>
<li>This will start the blog server on port 9050. I personally had issues running on the default 2368 port so elected to set it manually</li>
<li>Also make sure to change "/Users/headly48/Documents/blog/ghost" to your own directory where you would like to save all generated files</li>
</ul>

<p>Thats it! You can now see your blog at <a href="http://localhost:9050">http://localhost:9050</a>.</p>

<p>Now that you have it running go to <a href="http://localhost:9050/ghost">http://localhost:9050/ghost</a> to make a local account. </p>

<p>Once logged in check out the getting started post on how to use markdown. Alternatively I find daringfireball a good site to start with when learning markdown <br>
<a href="https://daringfireball.net/projects/markdown/">https://daringfireball.net/projects/markdown/</a></p>

<h2 id="pushingtogithub">Pushing to Github</h2>

<p>In order for your site to display on github you will need to have/register a free account at <a href="https://github.com">github</a></p>

<p>Once you have a account create a repository with the name <br>
"accountname.github.io", where accountname is your user. In my case its "headly48.github.io"</p>

<p>To appear on github pages correctly the blog needs to be in a static format.</p>

<p>This is where <a href="https://pypi.python.org/pypi/buster/0.1">buster</a> comes in. To put simply buster converts the ghost blog from being driven by a database into a file structor</p>

<p>To install buster we first require a few dependencies. Unfortunately mac and windows are slightly different so I have separated out the process for each below.</p>

<h6 id="windows">Windows</h6>

<p>For Windows users you are required to download pip. The instructions to install pip here <a href="https://github.com/BurntSushi/nfldb/wiki/Python-&amp;-pip-Windows-installation">here</a>. <br>
Once installed you will also need wget which can be found <a href="http://gnuwin32.sourceforge.net/packages/wget.htm">here</a>.</p>

<p>Once done run the command <code>pip install buster</code> in the command line</p>

<h6 id="mac">Mac</h6>

<p>For Mac its best to install the python using homebrew instead of using the preinstalled version. Instructions for installing brew it can be found <a href="http://brew.sh/">here</a></p>

<p>Once brew is installed run the following command in the terminal to get the latest python <br>
<code>brew install python</code></p>

<p>Then run the following two commands in the terminal to finish it off <br>
<code>brew install wget</code></p>

<p><code>pip install buster</code></p>

<hr>

<p>Now that Buster has been installed cd in the terminal/command line to the directory that you would like to save your static content too</p>

<p>In my case since i am using "/Users/headly48/Documents/blog/ghost" as my base for my ghost server I have gone to "cd /Users/headly48/Documents/blog"</p>

<p>Run the command <br>
<code>buster setup --gh-repo=https://github.com/username/username.github.io.git</code></p>

<p>This will create a static folder linked to your git repo added earlier. Make sure you change username to your github ussername eg "buster setup --gh-repo=<a href="https://github.com/headly48/headly48.github.io.git">https://github.com/headly48/headly48.github.io.git</a>"</p>

<p><strong>Please Note:</strong> Make sure you do <strong>Not</strong> do this in the same directory as your docker files. If you do you will be encouter chown permission issues when trying to restart your docker server later on..</p>

<p>Run the command <code>buster generate --domain=http://127.0.0.1:9050</code> <br>
This will go through your site and convert it to html/static files under the newly created static directory.</p>

<p>Next run <code>buster preview</code> and navigate to <a href="http://localhost:9000/">http://localhost:9000/</a> in your browser to see how your site will appear once submitted to github.</p>

<p>To deploy your changes now run <code>buster deploy</code> <br>
This step will prompt you for your github username/password.</p>

<p>Once finished check out your new blog located at <a href="https://username.github.io">https://username.github.io</a>. Again just replace your username eg "<a href="https://headly48.github.io">https://headly48.github.io</a>"</p>

<p>If you check out some of the links on the page you may notice that they refer to localhost:2368.</p>

<p>To fix this create a new file called buster-build-static.sh containing the following lines.</p>

<p>#!/bin/bash</p>

<p># Generate static files with buster
buster generate --domain=<a href="http://127.0.0.1:9050">http://127.0.0.1:9050</a> </p>

<p># Replace urls that were missed by buster
find static/* -name robots.txt -type f -exec sed -i '' 's#<a href="http://localhost:2368#http://headly48.github.io#g">http://localhost:2368#http://headly48.github.io#g</a>' {} \; <br>
find static/* -name <em>.xsl -type f -exec sed -i '' 's#<a href="http://localhost:2368#http://headly48.github.io#g">http://localhost:2368#http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name <em>.xml -type f -exec sed -i '' 's#loc><a href="http://localhost:2368#loc">http://localhost:2368#loc</a>><a href="http://headly48.github.io#g">http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name <em>.html -type f -exec sed -i '' 's#u=<a href="http://localhost:2368#u=http://headly48.github.io#g">http://localhost:2368#u=http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name <em>.html -type f -exec sed -i '' 's#url=<a href="http://localhost:2368#url=http://headly48.github.io#g">http://localhost:2368#url=http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name <em>.html -type f -exec sed -i '' 's#href="<a href="http://localhost:2368#href=">http://localhost:2368#href=</a>"<a href="http://headly48.github.io#g">http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name <em>.html -type f -exec sed -i '' 's#src="<a href="http://localhost:2368#src=">http://localhost:2368#src=</a>"<a href="http://headly48.github.io#g">http://headly48.github.io#g</a>' {} \; <br>
find static/</em> -name *.html -type f -exec sed -i '' 's#link><a href="http://localhost:2368#link">http://localhost:2368#link</a>><a href="http://headly48.github.io#g">http://headly48.github.io#g</a>' {} \; </p>

<p>What this does is replace all localhost links with your correct domain. Make sure to go through the lines and change headly48 to your username. <br>
So from now on whenever you wish to regenerate your content use the following command instead of buster generate</p>

<p>Now run the command <code>sh buster-build-static.sh</code></p>

<p>and finally <code>buster deploy</code> to update github with your changes.</p>

<p>To shutdown your local ghost run <br>
<code>docker stop blog-ghost</code></p>

<p>And if you want to bring it back up again when you next want to make changes <br>
<code>docker start blog-ghost</code></p>]]></content:encoded></item><item><title><![CDATA[First Blog Post - "Hello World"]]></title><description><![CDATA[<p>Just the typical hello world test</p>]]></description><link>http://localhost:2368/welcome-to-ghost/</link><guid isPermaLink="false">e88dd491-6d42-4ef5-9632-cfc4ffc54a22</guid><category><![CDATA[Getting Started]]></category><dc:creator><![CDATA[Joshua Head]]></dc:creator><pubDate>Thu, 28 Jul 2016 08:54:29 GMT</pubDate><content:encoded><![CDATA[<p>Just the typical hello world test</p>]]></content:encoded></item></channel></rss>
